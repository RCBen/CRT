function A = importfileCSV(filename, startRow, endRow)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [DATUMZEIT,TIC0,QUALITT,ZEITMARKE,TIC6,QUALITT1,ZEITMARKE1,TIC7,QUALITT2,ZEITMARKE2,TIC8,QUALITT3,ZEITMARKE3,TIC9,QUALITT4,ZEITMARKE4,TIC10,QUALITT5,ZEITMARKE5]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [DATUMZEIT,TIC0,QUALITT,ZEITMARKE,TIC6,QUALITT1,ZEITMARKE1,TIC7,QUALITT2,ZEITMARKE2,TIC8,QUALITT3,ZEITMARKE3,TIC9,QUALITT4,ZEITMARKE4,TIC10,QUALITT5,ZEITMARKE5]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [DatumZeit,TIC0,Qualitt,Zeitmarke,TIC6,Qualitt1,Zeitmarke1,TIC7,Qualitt2,Zeitmarke2,TIC8,Qualitt3,Zeitmarke3,TIC9,Qualitt4,Zeitmarke4,TIC10,Qualitt5,Zeitmarke5] = importfile('FlexLabtest.CSV',1, 538);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/12/22 11:02:44

%% Initialize variables.
delimiter = ';';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,5,6,8,9,11,12,14,15,17,18]
    % Converts text in the input cell array to numbers. Replaced non-numeric
    % text with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\.]*)+[\,]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\.]*)*[\,]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers=='.');
                thousandsRegExp = '^\d+?(\.\d{3})*\,{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric text to numbers.
            if ~invalidThousandsSeparator;
                numbers = strrep(numbers, '.', '');
                numbers = strrep(numbers, ',', '.');
                numbers = textscan(numbers, '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,2,3,5,6,8,9,11,12,14,15,17,18]);
rawCellColumns = raw(:, [4,7,10,13,16,19]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
DatumZeit = cell2mat(rawNumericColumns(:, 1));
TIC0 = cell2mat(rawNumericColumns(:, 2));
Qualitt = cell2mat(rawNumericColumns(:, 3));
Zeitmarke = rawCellColumns(:, 1);
TIC6 = cell2mat(rawNumericColumns(:, 4));
Qualitt1 = cell2mat(rawNumericColumns(:, 5));
Zeitmarke1 = rawCellColumns(:, 2);
TIC7 = cell2mat(rawNumericColumns(:, 6));
Qualitt2 = cell2mat(rawNumericColumns(:, 7));
Zeitmarke2 = rawCellColumns(:, 3);
TIC8 = cell2mat(rawNumericColumns(:, 8));
Qualitt3 = cell2mat(rawNumericColumns(:, 9));
Zeitmarke3 = rawCellColumns(:, 4);
TIC9 = cell2mat(rawNumericColumns(:, 10));
Qualitt4 = cell2mat(rawNumericColumns(:, 11));
Zeitmarke4 = rawCellColumns(:, 5);
TIC10 = cell2mat(rawNumericColumns(:, 12));
Qualitt5 = cell2mat(rawNumericColumns(:, 13));
Zeitmarke5 = rawCellColumns(:, 6);

A = [TIC6,TIC7,TIC8,TIC9,TIC10,TIC0];
